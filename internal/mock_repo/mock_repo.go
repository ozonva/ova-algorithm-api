// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/repo.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	algorithm "github.com/ozonva/ova-algorithm-api/internal/algorithm"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddAlgorithms mocks base method.
func (m *MockRepo) AddAlgorithms(ctx context.Context, algorithm []algorithm.Algorithm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAlgorithms", ctx, algorithm)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAlgorithms indicates an expected call of AddAlgorithms.
func (mr *MockRepoMockRecorder) AddAlgorithms(ctx, algorithm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAlgorithms", reflect.TypeOf((*MockRepo)(nil).AddAlgorithms), ctx, algorithm)
}

// DescribeAlgorithm mocks base method.
func (m *MockRepo) DescribeAlgorithm(ctx context.Context, algorithmID uint64) (*algorithm.Algorithm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAlgorithm", ctx, algorithmID)
	ret0, _ := ret[0].(*algorithm.Algorithm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlgorithm indicates an expected call of DescribeAlgorithm.
func (mr *MockRepoMockRecorder) DescribeAlgorithm(ctx, algorithmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlgorithm", reflect.TypeOf((*MockRepo)(nil).DescribeAlgorithm), ctx, algorithmID)
}

// ListAlgorithms mocks base method.
func (m *MockRepo) ListAlgorithms(ctx context.Context, limit, offset uint64) ([]algorithm.Algorithm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlgorithms", ctx, limit, offset)
	ret0, _ := ret[0].([]algorithm.Algorithm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAlgorithms indicates an expected call of ListAlgorithms.
func (mr *MockRepoMockRecorder) ListAlgorithms(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlgorithms", reflect.TypeOf((*MockRepo)(nil).ListAlgorithms), ctx, limit, offset)
}

// RemoveAlgorithm mocks base method.
func (m *MockRepo) RemoveAlgorithm(ctx context.Context, algorithmID uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAlgorithm", ctx, algorithmID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAlgorithm indicates an expected call of RemoveAlgorithm.
func (mr *MockRepoMockRecorder) RemoveAlgorithm(ctx, algorithmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAlgorithm", reflect.TypeOf((*MockRepo)(nil).RemoveAlgorithm), ctx, algorithmID)
}

// UpdateAlgorithm mocks base method.
func (m *MockRepo) UpdateAlgorithm(ctx context.Context, algorithm algorithm.Algorithm) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlgorithm", ctx, algorithm)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAlgorithm indicates an expected call of UpdateAlgorithm.
func (mr *MockRepoMockRecorder) UpdateAlgorithm(ctx, algorithm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlgorithm", reflect.TypeOf((*MockRepo)(nil).UpdateAlgorithm), ctx, algorithm)
}
